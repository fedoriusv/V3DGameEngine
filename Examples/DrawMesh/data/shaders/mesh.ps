struct PS_INPUT
{
    [[vk::location(0)]] float4 Pos       : SV_POSITION;
    [[vk::location(1)]] float3 Position  : POSITION;
    [[vk::location(2)]] float3 Normal    : NORMAL;
    [[vk::location(3)]] float2 UV        : TEXTURE;
};

[[vk::binding(1, 0)]] SamplerState samplerColor : register(s0);
[[vk::binding(2, 0)]] Texture2D textureColor : register(t0);

struct LIGHT
{
    float4 lightPosition;
};

[[vk::binding(3, 0)]] ConstantBuffer<LIGHT> light : register(b1);

[[vk::location(0)]] float4 main(PS_INPUT Input) : SV_TARGET0
{
    float4 OutColor = textureColor.Sample(samplerColor, Input.UV);

    float3 N = normalize(Input.Normal);
    float3 L = normalize(light.lightPosition.xyz - Input.Position);
    float diffuseKoeff = max(dot(N, L), 0.01);
    OutColor = float4(diffuseKoeff * OutColor.rgb, 1.0);
    
    return OutColor;
}