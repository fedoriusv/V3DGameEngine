struct PS_INPUT 
{
    float3 Position  : POSITION;
    float3 Normal    : NORMAL;
    float2 UV        : TEXTURE;
};

SamplerState samplerColor : register(s1);
Texture2D textureColor : register(t2);

struct LIGHT
{
    float4 lightPosition;
};

ConstantBuffer<LIGHT> light : register(b3);

float4 main(PS_INPUT Input) : SV_TARGET0
{
    float4 OutColor = textureColor.Sample(samplerColor, Input.UV);

    float3 N = normalize(Input.Normal);
    float3 L = normalize(light.lightPosition.xyz - Input.Position);
    float diffuseKoeff = max(dot(N, L), 0.01);
    OutColor = float4(diffuseKoeff * OutColor.rgb, 1.0);
    
    return OutColor;
}