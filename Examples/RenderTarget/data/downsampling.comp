#version 450

layout(local_size_x = 4, local_size_y = 4) in;
layout(binding = 0, rgba8) uniform readonly image2D inputImage;
layout(binding = 1, rgba8) uniform image2D resultImage;

vec3 image2DInterpolation(ivec2 texCoord)
{
    const ivec2 size = imageSize(inputImage);
    const vec2 texelSize = vec2(1.0, 1.0) / size;
    
    vec4 p0q0 = imageLoad(inputImage, texCoord);
    vec4 p1q0 = imageLoad(inputImage, texCoord + ivec2(1.0, 0.0));
    vec4 p0q1 = imageLoad(inputImage, texCoord + ivec2(0.0, 1.0));
    vec4 p1q1 = imageLoad(inputImage, texCoord + ivec2(1.0 , 1.0));

    //vec2 a = fract(texCoord * texelSize);
    vec2 a = vec2(0.5, 0.5);

    vec4 interpq0 = mix(p0q0, p1q0, a.x);
    vec4 interpq1 = mix(p0q1, p1q1, a.x);

    return mix(interpq0, interpq1, a.y).rgb;
}

void main() 
{
    vec3 value = image2DInterpolation(ivec2(gl_GlobalInvocationID.xy)).rgb;
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy / 2), vec4(value.rgb, 1.0));
}